version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: circleci-devops
          template: basic_fail_1
          
  install_aws_cli:
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    steps:
      - run:
          name: install ubuntu ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            #aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            #aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            #aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  install_nodejs:
    steps:
      - run:
          name: Install NodeJS 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt-get install -y nodejs

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo "Build environment: <<parameters.workflow_id>> "
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/test]
          key: frontend-test
      - notify_on_failure
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/test]
          key: backend-test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/scan]
          key: frontend-scan
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/scan]
          key: backend-scan
      - notify_on_failure
       
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=upeople \
              --stack-name "upeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=upeople \
              --stack-name "upeople-forntend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            mkdir -p .circleci/outputs/
            touch .circleci/outputs/backend_url.txt
            echo "http://$BACKEND_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            cat .circleci/outputs/backend_url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["3b:00:12:97:31:d8:93:15:08:b0:2c:7e:6c:ac:62:7b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml     

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_aws_cli
      - run:
          name: Run DB migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cat ~/project/backend/migration_output.txt
            if grep -q "has been executed successfully." ~/project/backend/migration_output.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy_environment
      - revert_migrations:
         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Get Backend URL
          command: |
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            echo "API_URL: $API_URL"
            #export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            #  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #  --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #  --output text)
            #export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            #echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: [ "3b:00:12:97:31:d8:93:15:08:b0:2c:7e:6c:ac:62:7b" ]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Deploy backend
          command: |           
            export TYPEORM_MIGRATION_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd backend
            npm run build
            cd dist
            cp ../package.json .
            zip -rq dist.zip *
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv dist.zip ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/.circleci/ansible/
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - attach_workspace:
          at: ~/

      - run:
          name: Test frontend app
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-1.amazonaws.com/ | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Test backend app.
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              export API_URL=http://$BACKEND_PUBLIC_IP:3030"
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations:
         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          channel: C03GGQ6JHKL
          event: pass
          template: success_tag_deployment
              
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - notify_on_success:
          requires:
            - build-frontend
            - build-backend
            - scan-backend
            - scan-frontend